apply plugin: 'org.linkedin.cmdline'
apply plugin: 'org.linkedin.release'

configurations {
  jetty
}

dependencies {
  jetty spec.external.jettyPackage
}

def jettyDistribution = "jetty-distribution-${spec.versions.jetty}"

def webappProject = evaluationDependsOn(':kiwidoc:com.pongasoft.kiwidoc.web')

String webapp = webappProject.tasks.getByPath('package-war').artifactFile.name

cmdline {
  dependsOn = [
    ':kiwidoc:com.pongasoft.kiwidoc.web:war'
  ]

  replacementTokens = [
    'jetty.distribution': jettyDistribution,
    'webapp': webapp
  ]

  // kiwidoc.war
  resources << [
    from: webappProject.tasks.getByPath('package-war').artifactFile,
    replaceTokens: false
  ]
}

File basePackage = project.convention.plugins.cmdline.assemblePackageFile
File jettyRoot = new File(basePackage, jettyDistribution)

/*
 * Copyright (c) 2012 Yan Pujante
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/********************************************************
 * task: package-assemble
 * customizing package-assemble task to include jetty
 ********************************************************/
project.'package-assemble'.doFirst {
  // fetch/untar jetty distribution 
  ant.untar(src: configurations.jetty.resolve().toList()[0],
            dest: basePackage,
            compression: 'gzip')

  // remove the webapps and contexts folders
  project.delete(new File(jettyRoot, "webapps"))
  project.delete(new File(jettyRoot, "contexts"))
}

/********************************************************
 * task: package-assemble
 * copy the context files in jetty distribution
 ********************************************************/
project.'package-assemble'.doLast {
  copy {
    from fileTree(dir: new File(basePackage, "conf"), includes: ["*-jetty-context.xml"])
    into new File(jettyRoot, 'contexts')
  }
  copy {
    from fileTree(dir: new File(basePackage, "conf"), includes: ["start.ini"])
    into jettyRoot
  }
  copy {
    from fileTree(dir: new File(basePackage, "etc"), includes: ["*.xml"])
    into new File(jettyRoot, 'etc')
  }
}