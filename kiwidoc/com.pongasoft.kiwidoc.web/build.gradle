/*
 * Copyright (c) 2012 Yan Pujante
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

import org.linkedin.gradle.tasks.SingleArtifactTask

apply plugin: 'groovy'
apply plugin: 'org.linkedin.release'

dependencies {
  compile project(':kiwidoc:com.pongasoft.kiwidoc.index.api')
  compile project(':kiwidoc:com.pongasoft.kiwidoc.index.impl')
  compile project(':kiwidoc:com.pongasoft.kiwidoc.builder')
  compile project(':utils:com.pongasoft.util.html')
  compile project(':utils:com.pongasoft.util.io')
  compile spec.external.commonsLogging

  groovy spec.external.groovy

  testCompile spec.external.junit
}

def facets = """
<component name="FacetManager">
  <facet type="Spring" name="Spring">
    <configuration>
      <fileset id="Grails" name="Grails" removed="false">
        <file>file://\$MODULE_DIR\$/web-app/WEB-INF/applicationContext.xml</file>
      </fileset>
    </configuration>
  </facet>
  <facet type="web" name="GrailsWeb">
    <configuration>
      <webroots>
        <root url="file://\$MODULE_DIR\$/web-app" relative="/" />
      </webroots>
      <sourceRoots />
    </configuration>
  </facet>
</component>
"""

ideaModule {
  whenConfigured { module ->
    ['grails-app/utils', 'grails-app/controllers', 'grails-app/domain', 'grails-app/services', 'grails-app/realms', 'grails-app/taglib'].each {
      module.sourceFolders << new org.gradle.plugins.idea.model.Path("file://\$MODULE_DIR\$/${it}")
    }
    ['test/unit', 'test/integration'].each {
      module.testSourceFolders << new org.gradle.plugins.idea.model.Path("file://\$MODULE_DIR\$/${it}")
    }
  }

  withXml { root ->
    // add facets
    root.asNode().append(new XmlParser().parseText(facets))

    // add grails library
    root.asNode().component.find { it.@name == 'NewModuleRootManager'}.appendNode('orderEntry', [type: 'library', name: "grails-${spec.versions.grails}", level: 'application'])
  }
}

project.clean << {
  fileTree(dir: 'lib').each { it.delete() }
}

task lib(dependsOn: jar) << {
  fileTree(dir: 'lib').each { it.delete() }
  copy {
    from configurations.runtime
    into 'lib'
  }
  // workaround against /org/apache/tools/ant/antlib.xml:37: Problem: failed to create
  // task or type componentdef
  delete 'lib/ant-1.8.1.jar'
  delete 'lib/ant-launcher-1.8.1.jar'
}

['run-app', 'test-app'].each { taskName ->
  task "${taskName}"(dependsOn: lib) << {
    ant.exec(dir: '.', executable: "grails", failonerror: true) {
      arg(line: "${taskName}")
    }
  }
}

def warFile = new File("${buildDir}/distributions/${project.name}-${project.version}.war")

task war(dependsOn: lib) << {
  ant.exec(dir: '.', executable: "grails") {
    arg(line: "-Dgrails.project.war.file=${warFile} war")
  }
}

task([type: SingleArtifactTask, dependsOn: 'war'], 'package-war') {
  artifactFile        = warFile
  artifactReleaseInfo =
    [
        name:           project.name,
        extension:      'war',
        configurations: ['war']
    ]
}

task test(overwrite:true, dependsOn: 'lib') << {
  ant.exec(dir: '.', executable: "grails") {
    arg(line: "test-app -unit")
  }
}